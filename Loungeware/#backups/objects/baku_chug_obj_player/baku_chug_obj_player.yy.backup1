// 2021-07-09 00:56:24
#event properties (no comments/etc. here are saved)
parent_index = -1;
uses_physics = false;

#event create

// Background
bg_x		= 0;
bg_y		= 0;
bg_spd_x	= 0.25;
bg_spd_y	= 0.125;

// Chugging
chug_value	= 0;
chug_goal	= 95 + (DIFFICULTY * 5);
chug_add	= 5;

// Sprite offsets and other lerped junk
gun_x_offset = 128;
pepsi_y_offset = 128;
hud_alpha = 0;

// Head tilt
dir_goal = 15;
dir_value = 0;

// Swallow animation
swallow_img = 0;
swallow_max = sprite_get_number(baku_chug_spr_profile_neck) - 1;
swallow_spd = 1;
swallowing = false;

// Game state
game_started = false;
game_countdown = 60;
game_time = game_get_speed(gamespeed_fps) * 3;
game_win = false;
game_lose = false;

// Win
gun_has_shot = false;
gun_win_dir = 0;
gun_win_x = 0;
game_win_time = 0;
game_win_shoot = 15;
game_win_flash = 0;
win_cry_img = 0;

// Lose
gun_lose_dir = 0;
game_lose_time = 0;

// Squish and shake
shake_strength = 1;
squish_x = 1;
squish_y = 1;

// Point constructor
Point = function(_x, _y, _x2, _y2) constructor {
	x			= _x;
	y			= _y;
	x2			= _x2;
	y2			= _y2;
	point_dis	= point_distance(_x, _y, _x2, _y2);
	point_dir	= point_direction(_x, _y, _x2, _y2);
	x_new		= _x;
	y_new		= _y;
	x2_new		= _x2;
	y2_new		= _y2;
	dir_self	= 0;
	dir_cum		= 0;
	dir_new		= 0;
}

// Define points
points = [
	new Point(
		240,
		112,
		240,
		112
	),
	new Point(
		sprite_get_xoffset(baku_chug_spr_profile_shoulder_back),
		sprite_get_yoffset(baku_chug_spr_profile_shoulder_back),
		sprite_get_xoffset(baku_chug_spr_profile_neck),
		sprite_get_yoffset(baku_chug_spr_profile_neck),
	),
	new Point(
		sprite_get_xoffset(baku_chug_spr_profile_neck),
		sprite_get_yoffset(baku_chug_spr_profile_neck),
		sprite_get_xoffset(baku_chug_spr_profile_head),
		sprite_get_yoffset(baku_chug_spr_profile_head)
	),
	new Point(
		sprite_get_xoffset(baku_chug_spr_profile_head),
		sprite_get_yoffset(baku_chug_spr_profile_head),
		23,
		86
	),
	new Point(
		23,
		86,
		23,
		86+40
	),
];

// Profile parts
bodyparts = [
	{ point : 1,	spr : baku_chug_spr_profile_shoulder_back	},
	{ point : 2,	spr : baku_chug_spr_profile_neck			},
	{ point : 1,	spr : baku_chug_spr_profile_shoulder_front	},
	{ point : 3,	spr : baku_chug_spr_profile_head			},
	{ point : 4,	spr : baku_chug_spr_pepsi					},
];

// Keys stuffs
key = {
	up		: 0,
	down	: 1,
	left	: 2,
	right	: 3,
	a		: 4,
	b		: 5,
};
key_combo		= [];
key_combo[0]	= choose(key.up, key.down, key.left, key.right);
key_combo[1]	= choose(key.a, key.b);
last_key		= -1;

// Key images
key_offset_value	= 6;
key_offset			= 1;
key_img				= [];
key_img[0]			= key_combo[0];
key_img[1]			= key_combo[1] + key_offset_value;
key_img_time		= 0;
key_img_speed		= 5;
alarm[0]			= key_img_speed;

#event alarm0

// Key images
alarm[0] = key_img_speed;
key_offset = (key_offset == 0) ? 1 : 0;
switch key_offset {
	case 0:
		key_img[0] = key_combo[0];
		key_img[1] = key_combo[1] + key_offset_value;
	break;
	
	case 1:
		key_img[0] = key_combo[0] + key_offset_value;
		key_img[1] = key_combo[1];
	break;
}

#event step

// Start the game
if !game_started {
	game_countdown --;
	if game_countdown <= 0 {
		game_started = true;
	}
}

// Game time
else {
	if !game_win and !game_lose
		game_time --;
	
	if game_time < 0 and !game_win and !game_lose {
		game_lose = true;
		game_time = 0;
		gun_lose_dir = 30;
		squish_x = 0.8;
		squish_y = 1.25;
		sfx_play(baku_chug_snd_flag, 1, 0);
		sfx_play(baku_chug_snd_lose, 1, 0);
	}
	
	if game_lose {
		gun_lose_dir = lerp(gun_lose_dir, 15, 0.1);
		game_lose_time += 0.25;
		squish_x = lerp(squish_x, 1, 0.25);
		squish_y = lerp(squish_y, 1, 0.25);
	}
	
	if game_win and game_win_time > game_win_shoot {
		squish_x = lerp(squish_x, 1, 0.1);
		squish_y = lerp(squish_y, 1, 0.1);
	}
}

// Press keys
// Only do stuff if game in progress
if (chug_value < chug_goal) and game_started and !game_win and !game_lose {

	// Get all currently held keys
	var _held_keys = [];
	if KEY_UP			array_push(_held_keys, key.up);
	if KEY_DOWN			array_push(_held_keys, key.down);
	if KEY_LEFT			array_push(_held_keys, key.left);
	if KEY_RIGHT		array_push(_held_keys, key.right);
	if KEY_PRIMARY		array_push(_held_keys, key.a);
	if KEY_SECONDARY	array_push(_held_keys, key.b);
	
	// Is only one key held?
	if (array_length(_held_keys) == 1) {
		var _key = _held_keys[0];
		
		// Is the key in our combo?
		if (_key == key_combo[0])
		or (_key == key_combo[1]) {
			
			// Is it different from the last key?
			if _key != last_key {
				
				// Chuggin' it!!!
				chug_value += chug_add;
				last_key = _key;
				swallowing = true;
				sfx_play(baku_chug_snd_swallow, 1, 0);
			}
		}
	}
}

// winner is u
if chug_value >= chug_goal and !game_lose and !game_win {
	chug_value = chug_goal;
	game_win = true;
	squish_x = 0.8;
	squish_y = 1.25;
	microgame_win();
}

// Swallow
if swallowing {
	swallow_img += swallow_spd;
	if swallow_img > swallow_max {
		swallow_img = 0;
		swallowing = false;
	}
}

// Dir value
dir_value = lerp(dir_value, (chug_value / chug_goal) * dir_goal, 0.1);
points[2].dir_self = -dir_value;
points[3].dir_self = -dir_value;
points[4].dir_self = (-dir_value * 3) - 20;

// Offsets + other lerps
gun_x_offset = lerp(gun_x_offset, 0, 0.05);
pepsi_y_offset = lerp(pepsi_y_offset, 0, 0.1);
hud_alpha = lerp(hud_alpha, 1, 0.1);

// Origin point
points[0].x		= lerp(points[0].x, 96, 0.1);
points[0].x2	= lerp(points[0].x2, 96, 0.1);
var _shake = shake_strength * (chug_value / chug_goal);
points[0].x_new		= points[0].x	+ random_range(-_shake, _shake);
points[0].y_new		= points[0].y	+ random_range(-_shake, _shake);
points[0].x2_new	= points[0].x2	+ random_range(-_shake, _shake);
points[0].y2_new	= points[0].y2	+ random_range(-_shake, _shake);

// Solve points cursedly
var _point_count = array_length(points);
for (var i = 1; i < _point_count; ++i) {
	// New XY
	points[i].x_new = points[i - 1].x2_new;
	points[i].y_new = points[i - 1].y2_new;
	
	// Dir
	points[i].dir_cum = points[i].dir_self + points[i - 1].dir_cum;
	
	// New XY2
	points[i].x2_new = points[i].x_new + lengthdir_x(points[i].point_dis, points[i].point_dir + points[i].dir_cum);
	points[i].y2_new = points[i].y_new + lengthdir_y(points[i].point_dis, points[i].point_dir + points[i].dir_cum);
}


// Game win shot
if game_win {
	game_win_time ++;
	
	// lerpy derpy
	gun_win_dir = lerp(gun_win_dir, 35, 0.25);
	gun_win_x = lerp(gun_win_x, 15, 0.25);
	
	// Flash
	game_win_flash -= 0.05;
	if game_win_time == game_win_shoot {
		game_win_flash = 1.5;
		sfx_play(baku_chug_snd_shoot, 1, 0);
	}
	
	// Cry
	if game_win_time > game_win_shoot + 60 {
		win_cry_img += 1/3;
		if win_cry_img > sprite_get_number(baku_chug_spr_cry)
			win_cry_img = sprite_get_number(baku_chug_spr_cry);
	}
	
	// Smoke
	if game_win_time > game_win_shoot and game_win_time mod 10 == 0 {
		instance_create_layer(142, 10, "Instances", baku_chug_obj_smoke);
	}
	
	// Confetti
	if game_win_time > game_win_shoot and game_win_time mod 5 == 0 {
		instance_create_layer(random_range(-8, 168), -8, "Instances", baku_chug_obj_confetti);
		instance_create_layer(random_range(-8, 168), -8, "Instances", baku_chug_obj_confetti);
	}
}

#event draw

// Background
bg_x += bg_spd_x;
bg_y += bg_spd_y;
draw_sprite_tiled_ext(baku_chug_spr_bg, 0, bg_x, bg_y, 1, 1, c_white, 1);

// Win confetti
with (baku_chug_obj_confetti) {
	draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}

// Winner Sid
if game_win and game_win_time > game_win_shoot {
	var _shake = shake_strength / 2;
	draw_sprite_ext(baku_chug_spr_cry, win_cry_img, 96 + random_range(-_shake, _shake) - 4, 144 - 16 + random_range(-_shake, _shake), squish_x, squish_y, 0, c_white, 1);
}

// Loser Sid
else if game_lose {
	var _shake = shake_strength / 2;
	draw_sprite_ext(baku_chug_spr_spittake, game_lose_time, 100 - 16 + 4 + random_range(-_shake, _shake), 144 - 16 + random_range(-_shake, _shake), squish_x, squish_y, 0, c_white, 1);
}

// Normal Sid
else {
	// Arm
	var _arm_x = points[4].x2_new;
	var _arm_y = points[4].y2_new + pepsi_y_offset;
	var _arm_x2 = 32;
	var _arm_y2 = 320;
	var _arm_dir = point_direction(_arm_x, _arm_y, _arm_x2, _arm_y2) + 90 - (dir_value / 2);
	draw_sprite_ext(baku_chug_spr_sid_arm, 0, _arm_x, _arm_y, 1, 1, _arm_dir, c_white, 1);
	
	// Bodyparts
	var _bodypart_count = array_length(bodyparts);
	for (var i = 0; i < _bodypart_count; ++i) {
		var _part = bodyparts[i];
		var _point = points[_part.point];
		
		// Swallow
		var _img = 0;
		if _part.spr == baku_chug_spr_profile_neck {
			_img = swallow_img;
		}
		
		// Pepsi y offset
		var _y_offset = 0;
		if _part.spr == baku_chug_spr_pepsi {
			_y_offset = pepsi_y_offset;
		}
		
		// Draw sprite
		draw_sprite_ext(_part.spr, _img, _point.x_new, _point.y_new + _y_offset, 1, 1, _point.dir_cum, c_white, 1);
	}
	
	// Bones
	// var _point_count = array_length(points);
	// for (var i = 0; i < _point_count; ++i) {
	// 	var _point = points[i];
	// 	draw_line_width_colour(_point.x_new, _point.y_new, _point.x2_new, _point.y2_new, 2, c_blue, c_white);
	// }
}

// Gun smoke
with baku_chug_obj_smoke {
	draw_self();
}

// Gun
var _wobble = sin(current_time / 500) * 4;
if game_win or game_lose _wobble = 0;
var _spr = baku_chug_spr_gun;
if game_lose _spr = baku_chug_spr_gun_flag;
draw_sprite_ext(_spr, 0, 180 + gun_x_offset - gun_win_x, 107, 1, 1, -25 + _wobble - gun_win_dir - gun_lose_dir, c_white, 1);

// Corner HUD
draw_sprite_ext(baku_chug_spr_hud, 0, 0, 0, 1, 1, 0, c_white, 0.5);

// Keys to press
if game_started and !game_win and !game_lose {
	var _key_x = -3;
	var _key_y = -2;
	draw_sprite(baku_chug_spr_key, key_img[0], _key_x, _key_y);
	_key_x += 22;
	draw_sprite(baku_chug_spr_key, key_img[1], _key_x, _key_y);
}

// Win msg
if game_win and game_win_time > game_win_shoot {
	draw_sprite(baku_chug_spr_win, 0, 0, 0);
}

// Lose msg
if game_lose {
	draw_sprite(baku_chug_spr_lose, 0, 0, 0);
}

// Win flash
if game_win {
	draw_sprite_stretched_ext(baku_chug_spr_pixel, 0, 0, 0, 999, 999, 0xe0ffff, game_win_flash);
}

// Debug
// draw_set_colour(c_white);
// draw_text(8, 32, string(chug_value) + " / " + string(chug_goal));
// draw_text(8, 32, string(game_time));